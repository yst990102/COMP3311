#!/usr/bin/python3
# COMP3311 21T3 Ass2 ... print a transcript for a given student

import sys
import psycopg2
import re
from helpers import Grade_in_UOC, Grade_in_WAM, Print_Xuoc, Print_fail, getStudent, getTranscriptInfo

# define any local helper functions here

### set up some globals

usage = f"Usage: {sys.argv[0]} zID"
db = None

### process command-line args

argc = len(sys.argv)
if argc < 2:
	print(usage)
	exit(1)
zid = sys.argv[1]
if zid[0] == 'z':
	zid = zid[1:8]
digits = re.compile("^\d{7}$")
if not digits.match(zid):
	print(f"Invalid student ID {zid}")
	exit(1)

# manipulate database

try:
	db = psycopg2.connect(dbname="mymyunsw",user="yst990102",password="zxcvb987321",port="6000")
	stuInfo = getStudent(db,zid)
	if not stuInfo:
		print(f"Invalid student ID {zid}")
		exit()

	# print student info
	[zid_str, family_name, given_name] = stuInfo[0:3]
	print(f"{zid_str} {family_name}, {given_name}")

	# get the infos for transcripts
	trans_infos = getTranscriptInfo(db, zid)

	weighted_mark_sum   = 0
	total_attempted_uoc = 0
	total_achieved_uoc  = 0

	for trans_info in trans_infos:
		[CourseCode, Term, SubjectTitle, Mark, Grade, UOC] = trans_info
		# uoc and wam calculate
		if Grade in Grade_in_UOC:
			total_achieved_uoc += UOC
		if Grade in Grade_in_WAM:
			if Mark != None:
 				weighted_mark_sum += (Mark * UOC)
			else:
				weighted_mark_sum += 0
			total_attempted_uoc += UOC

		# print transcript
		CourseCode_str = f"{CourseCode}"
		Term_str = f"{Term}"
		SubjectTitle_str = f"{SubjectTitle:<32s}"
		Mark_str = "  -" if Mark == None else f"{Mark:>3}"
		Grade_str = f"{Grade:2s}"
		
		UOC_str = ""
		if Grade in Print_Xuoc:
			UOC_str = f"{UOC:2d}uoc"
			print(CourseCode_str + " " + Term_str + " " + SubjectTitle_str + Mark_str + " " + Grade_str + "  " + UOC_str)
		elif Grade in Print_fail:
			print(CourseCode_str + " " + Term_str + " " + SubjectTitle_str + Mark_str + " " + Grade_str + "   " + "fail")
		else:
			UOC_str = ""
			print(CourseCode_str + " " + Term_str + " " + SubjectTitle_str + Mark_str + " " + Grade_str)

	print(f"UOC = {total_achieved_uoc}, WAM = {weighted_mark_sum / total_attempted_uoc:.1f}")





	#print(stuInfo) # debug
	# Print transcript for Student
	# ... add your code here ...

except Exception as err:
	print("DB error: ", err)
finally:
	if db:
		db.close()

