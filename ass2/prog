#!/usr/bin/python3
# COMP3311 21T3 Ass2 ... progression check for a given student

import sys
import psycopg2
import re
from helpers import Print_fail, PrintFE, PrintFE_Q3, PrintGE, PrintGE_Q3, PrintPE, PrintPE_Q3, getBasicProgramInfo, getBasicStreamInfo, getCompletedSubjects, getProgramRules, getProgramStreamTableByZid, getStreamRules, getStudent, getProgram, getStream, getNameByZid, getSubjectNameByCode

# define any local helper functions here
def getRelevantRules(rules, CourseCode, required_type):
	relevant_rules = []
	for rule in rules:
		[rule_name, rule_type, min_req, max_req, courses] = rule
		if rule_type == required_type != 'FE':
			for course in courses:
				if type(course) == list:
					for course_code in course:
						if re.match(course_code, CourseCode):
							relevant_rules.append(rule_name)
				elif type(course) == str and re.match(course, CourseCode):
					relevant_rules.append(rule_name)
		elif rule_type == required_type == 'FE':
			relevant_rules.append(rule_name)
		else:
			continue
	return relevant_rules


### set up some globals
debug = 0



usage = f"Usage: {sys.argv[0]} zID [Program Stream]"
db = None

### process command-line args

argc = len(sys.argv)
if argc < 2:
	print(usage)
	exit(1)
zid = sys.argv[1]
if zid[0] == 'z':
	zid = zid[1:8]
digits = re.compile("^\d{7}$")
if not digits.match(zid):
	print("Invalid student ID")
	exit(1)

progCode = None
strmCode = None

if argc == 4:
	progCode = sys.argv[2]
	strmCode = sys.argv[3]

# manipulate database

try:
	db = psycopg2.connect(dbname="mymyunsw",user="yst990102",password="zxcvb987321",port="6000")
	stuInfo = getStudent(db,zid)
	if not stuInfo:
		print(f"Invalid student id {zid}")
		exit()
	#print(stuInfo)
	[family_name , given_name] = getNameByZid(db, zid)[1:]
	print(f"{zid} {family_name}, {given_name}")

	if progCode:
		progInfo = getProgram(db,progCode)
		if not progInfo:
			print(f"Invalid program code {progCode}")
			exit()

	if strmCode:
		strmInfo = getStream(db,strmCode)
		if not strmInfo:
			print(f"Invalid program code {strmCode}")
			exit()

	# if have a program/stream
	#   show progression check on supplied program/stream
	# else
	#   show progression check on most recent program/stream enrolment

	if progCode and strmCode:
		program = progCode
		stream = strmCode
	else:
		prog_strm_table = getProgramStreamTableByZid(db, zid)
		latest_prog_strm = prog_strm_table[-1]
		program = latest_prog_strm[1]
		stream = latest_prog_strm[2]

	program_name = getBasicProgramInfo(db,program)[1]
	stream_name = getBasicStreamInfo(db, stream)[1]

	print(f"  {program} {program_name}")
	print(f"  {stream} {stream_name}")

	# get stream rules
	stream_rules = getStreamRules(db, stream)
	formated_stream_rules = []
	for stream_rule in stream_rules:
		if stream_rule[1] == 'DS': continue
		formated_stream_rule = list(stream_rule)[:-1]

		splited_requirements = stream_rule[-1].split(",")
		formated_requirements = []
		for i in splited_requirements:
			i = i.replace('{', '["')
			i = i.replace('}', '"]')
			i = i.replace(';', '","')
			if '[' in i and ']' in i:
				formated_requirements.append(eval(i))
			elif '#' in i:
				formated_requirements.append(re.sub('#', '.', i))
			else:
				formated_requirements.append(i)
		formated_stream_rule.append(formated_requirements)
		formated_stream_rules.append(formated_stream_rule)
	stream_rules = formated_stream_rules

	# get program rules
	program_rules = getProgramRules(db, program)
	formated_program_rules = []
	for program_rule in program_rules:
		if program_rule[1] == 'DS': continue
		formated_program_rule = list(program_rule)[:-1]

		splited_requirements = program_rule[-1].split(",")
		formated_requirements = []
		for i in splited_requirements:
			i = i.replace('{', '["')
			i = i.replace('}', '"]')
			i = i.replace(';', '","')
			if '[' in i and ']' in i:
				formated_requirements.append(eval(i))
			elif '#' in i:
				formated_requirements.append(re.sub('#', '.', i))
			else:
				formated_requirements.append(i)
  
		formated_program_rule.append(formated_requirements)
		formated_program_rules.append(formated_program_rule)
	program_rules = formated_program_rules

	if debug : print(program_rules)
	if debug : print(stream_rules)

	total_achieved_uoc  = 0

	print(f"\nCompleted:")
	CompletedSubjects = getCompletedSubjects(db, zid)
	for CompletedSubject in CompletedSubjects:
		[CourseCode, Term, SubjectTitle, Mark, Grade, UOC] = CompletedSubject
		Mark = "  -" if Mark == None else f"{Mark:>3}"
  
		if Grade in Print_fail:
			print(f"{CourseCode} {Term} {SubjectTitle:<32s}{Mark:>3} {Grade:2s}   fail does not count")
		else:
			relevant_rules = {}
			relevant_stream_rules_DS = getRelevantRules(stream_rules, CourseCode, 'DS')
			relevant_stream_rules_CC = getRelevantRules(stream_rules, CourseCode, 'CC')
			relevant_stream_rules_PE = getRelevantRules(stream_rules, CourseCode, 'PE')
			relevant_stream_rules_FE = getRelevantRules(stream_rules, CourseCode, 'FE')
			relevant_stream_rules_GE = getRelevantRules(stream_rules, CourseCode, 'GE')

			relevant_program_rules_DS = getRelevantRules(program_rules, CourseCode, 'DS')
			relevant_program_rules_CC = getRelevantRules(program_rules, CourseCode, 'CC')
			relevant_program_rules_PE = getRelevantRules(program_rules, CourseCode, 'PE')
			relevant_program_rules_FE = getRelevantRules(program_rules, CourseCode, 'FE')
			relevant_program_rules_GE = getRelevantRules(program_rules, CourseCode, 'GE')
			
			relevant_rules.update({'DS':relevant_program_rules_DS + relevant_stream_rules_DS})
			relevant_rules.update({'CC':relevant_program_rules_CC + relevant_stream_rules_CC})
			relevant_rules.update({'PE':relevant_program_rules_PE + relevant_stream_rules_PE})
			relevant_rules.update({'FE':relevant_program_rules_FE + relevant_stream_rules_FE})
			relevant_rules.update({'GE':relevant_program_rules_GE + relevant_stream_rules_GE})

			if debug : print(relevant_rules)

			Toward_str = ""
			Toward_type = ""
			if relevant_rules['CC']:	
				Toward_str = " + ".join(sorted(relevant_rules['CC'], reverse=True))
				Toward_type = 'CC'
			elif relevant_rules['PE']:
				Toward_str = " + ".join(sorted(relevant_rules['PE'], reverse=True))
				Toward_type = 'PE'
			elif relevant_rules['FE']:
				Toward_str = " + ".join(sorted(relevant_rules['FE'], reverse=True))
				Toward_type = 'FE'
			elif relevant_rules['GE']:
				Toward_str = " + ".join(sorted(relevant_rules['GE'], reverse=True))
				Toward_type = 'GE'

			if debug : print()
			if debug : print(Toward_str)
			if debug : print(Toward_type)

			if Toward_str != "":
				# remove course in stream_rules
				for rule in stream_rules[:]:
					stream_rules.remove(rule)
					[rule_name, rule_type, min_req, max_req, courses] = rule
					if rule_name in relevant_rules[Toward_type]:
						for course in courses[:]:
							if type(course) == list and CourseCode in course:
								courses.remove(course)
								if min_req != None and min_req >= UOC: min_req -= UOC
								if max_req != None and max_req >= UOC: max_req -= UOC
							elif type(course) == str and re.match(course, CourseCode) and rule_type != 'FE':
								courses.remove(course)
								if min_req != None and min_req >= UOC: min_req -= UOC
								if max_req != None and max_req >= UOC: max_req -= UOC
							elif rule_type == 'FE':
								if min_req != None and min_req >= UOC: min_req -= UOC
								if max_req != None and max_req >= UOC: max_req -= UOC
					rule = [rule_name, rule_type, min_req, max_req, courses]
					stream_rules.append(rule)

				# remove course in program_rules
				for rule in program_rules[:]:
					program_rules.remove(rule)
					[rule_name, rule_type, min_req, max_req, courses] = rule
					if rule_name in relevant_rules[Toward_type]:
						for course in courses[:]:
							if type(course) == list and CourseCode in course:
								courses.remove(course)
								if min_req != None: min_req -= UOC
								if max_req != None: max_req -= UOC
							elif type(course) == str and re.match(course, CourseCode) and rule_type != 'FE':
								courses.remove(course)
								if min_req != None: min_req -= UOC
								if max_req != None: max_req -= UOC
							elif rule_type == 'FE':
								courses.remove(course)
								if min_req != None and min_req >= UOC: min_req -= UOC
								if max_req != None and max_req >= UOC: max_req -= UOC
					rule = [rule_name, rule_type, min_req, max_req, courses]
					program_rules.append(rule)

				# remove stream rule with no courses
				for rule in stream_rules[:]:
					if rule[4] == []:
						stream_rules.remove(rule)
					if type(rule[3]) == int:
						if rule[3] == 0:
							stream_rules.remove(rule)

				# remove program rule with no courses
				for rule in program_rules[:]:
					if rule[4] == []:
						program_rules.remove(rule)
					if type(rule[3]) == int:
						if rule[3] == 0:
							program_rules.remove(rule)


			if debug : print()
			if debug : print(program_rules)
			if debug : print(stream_rules)

			if Toward_str == "":
				print(f"{CourseCode} {Term} {SubjectTitle:<32s}{Mark:>3} {Grade:2s}  {0:2d}uoc does not satisfy any rule")
			else:
				if Toward_type == 'CC' or Toward_type == 'PE' or Toward_type == 'GE':
					print(f"{CourseCode} {Term} {SubjectTitle:<32s}{Mark:>3} {Grade:2s}  {UOC:2d}uoc towards {Toward_str}")
				elif Toward_type == 'FE':
					print(f"{CourseCode} {Term} {SubjectTitle:<32s}{Mark:>3} {Grade:2s}  {UOC:2d}uoc towards Free Electives")
				total_achieved_uoc += UOC
	print(f"UOC = {total_achieved_uoc:2d} so far")

	print()
	print(f"Remaining to complete degree:")

	# combine all rules by types
	rest_CC_Rules = []
	rest_PE_Rules = []
	rest_FE_Rules = []
	rest_GE_Rules = []
	for stream_rule in stream_rules:
		[rule_name, rule_type, min_req, max_req, courses] = stream_rule
		if rule_type == 'CC':
			rest_CC_Rules.append(stream_rule)
		elif rule_type == 'PE':
			rest_PE_Rules.append(stream_rule)
		elif rule_type == 'FE':
			rest_FE_Rules.append(stream_rule)
		elif rule_type == 'GE':
			rest_GE_Rules.append(stream_rule)
	for project_rule in program_rules:
		[rule_name, rule_type, min_req, max_req, courses] = project_rule
		if rule_type == 'CC':
			rest_CC_Rules.append(project_rule)
		elif rule_type == 'PE':
			rest_PE_Rules.append(project_rule)
		elif rule_type == 'FE':
			rest_FE_Rules.append(project_rule)
		elif rule_type == 'GE':
			rest_GE_Rules.append(project_rule)
	if debug : print(rest_CC_Rules)
	if debug : print(rest_PE_Rules)
	if debug : print(rest_FE_Rules)
	if debug : print(rest_GE_Rules)

	# get the rest CC courses
	rest_courses_CC = []
	for cc_rule in rest_CC_Rules:
		[rule_name, rule_type, min_req, max_req, courses] = cc_rule
		for course in courses:
			rest_courses_CC.append(course)

	# ================ Print Out ================
	# print detail of CC rules
	for course in rest_courses_CC:
		if type(course) == list:
			for i in range(len(course)):
				[subject_code, subject_name] = getSubjectNameByCode(db, course[i])
				if i == 0:
					print(f"- {subject_code} {subject_name}")
				else:
					print(f"  or {subject_code} {subject_name}")
		else:
			[subject_code, subject_name] = getSubjectNameByCode(db, course)
			print(f"- {subject_code} {subject_name}")
	# print general info of PE rules
	for pe_rule in rest_PE_Rules:
		[rule_name, rule_type, min_req, max_req, courses] = pe_rule
		PrintPE_Q3(rule_name, min_req, max_req)
	# print general info of FE rules
	for fe_rule in rest_FE_Rules:
		[rule_name, rule_type, min_req, max_req, courses] = fe_rule
		PrintFE_Q3(rule_name, min_req, max_req)
	# print general info of GE rules
	for ge_rule in rest_GE_Rules:
		[rule_name, rule_type, min_req, max_req, courses] = ge_rule
		PrintGE_Q3(min_req)


except Exception as err:
	print("DB error: ", err)
finally:
	if db:
		db.close()